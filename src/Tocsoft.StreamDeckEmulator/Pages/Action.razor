
@page "/plugins/{pluginUUID}/actions/{contextid}"

@inject StreamDeckEmulator.Services.PluginManager pluginManager
@inject IJSRuntime jsRuntime
@inject NavigationManager NavManager
@implements IDisposable
<style>
    #action-btn {
        cursor: pointer;
        width: 72px;
        height: 72px;
        background-color: black;
        position: relative;
    }
        #action-btn img {
            pointer-events: none;
            position: absolute;
        }
        #action-btn img.action-img {
            width: 72px;
            top:0;
            left:0;
        }

        #action-btn.mousedown img.action-img {
            width: 56px;
            top: 9px;
            left: 9px;
        }

        #action-btn img.overlay {
            width: 40px;
            top: 16px;
            left: 16px;
        }
</style>
<button @onclick="Delete">Delete</button>
@if (plugin == null)
{
    <p>Loading..</p>
}
else
{
    <h1>@plugin.Name</h1>

    <h2>@action.Name - @action.ContextId</h2>


    <!-- this hsould be current image as a encoded string not a path -->
    <div id="action-btn" class="@(mouseDown?"mousedown":"")" @onmousedown="KeyDown" @onmouseup="KeyUp" @onmouseout="KeyUp">
        <img src="@action.Icon" class="action-img" />
        @if (okShowing)
        {
            <img src="/icons/check.png" alt="OK" class="overlay" />
        }
        @if (alertShowing)
        {
            <img src="/icons/alert.png" alt="Alert" class="overlay" />
        }
    </div>

    <br />
    <form>

        <div class="form-group">
            <label for="exampleInputEmail1">Email address</label>
            <input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
        </div>
        @if (!string.IsNullOrWhiteSpace(action.PropertyInspectorPath))
        {
            var config = new
            {
                port = pluginManager.WebSocketPort,
                uuid = action.ContextId,
                registerEvent = new StreamDeckEmulator.Models.ServerEvents.RegisterPropertyInspectorEvent().Event,
                pluginInfo = new { },
                actionInfo = new
                {
                    action = action.UUID,
                    context = action.ContextId,
                    device = "",
                    payload = new
                    {
                        settings = action.Settings ?? new Newtonsoft.Json.Linq.JObject(),
                        coordinates = new
                        {
                            column = 2,
                            row = 1

                        }
                    }
                }
            };

            var configJson = Tocsoft.StreamDeck.Events.StreamDeckEvent.Serialize(config);

            <iframe style="width:100%" src="_resources/@pluginUUID/@(action.PropertyInspectorPath)" onload="connectToEditor(this, @configJson)" />

        }
    </form>
}

@code {
    [ParameterAttribute]
    public string pluginUUID { get; set; }
    [ParameterAttribute]
    public string contextid { get; set; }
    public bool mouseDown { get; set; }
    public bool okShowing { get; set; }
    public bool alertShowing { get; set; }

    public StreamDeckEmulator.Services.Plugin plugin { get; set; }
    public StreamDeckEmulator.Services.Action action { get; set; }

    public IDisposable okListener;
    public IDisposable alertListener;
    public IDisposable changeListener;

    protected override async Task OnInitializedAsync()
    {
        this.plugin = pluginManager.GetPlugin(pluginUUID);
        this.action = plugin.GetActionByContext(contextid);

        this.changeListener = this.action.Listen<Tocsoft.StreamDeck.Events.StreamDeckOutboundActionEvent>(e =>
        {
            _ = this.InvokeAsync(this.StateHasChanged);
            return Task.CompletedTask;
        });
        this.okListener = this.action.Listen<Tocsoft.StreamDeck.Events.ShowOkEvent>(async e =>
        {
            okShowing = true;
            alertShowing = false;
            await this.InvokeAsync(this.StateHasChanged);

            await Task.Delay(2000);
            if (okShowing)
            {
                okShowing = false;
                await this.InvokeAsync(this.StateHasChanged);
            }
        });
        this.alertListener = this.action.Listen<Tocsoft.StreamDeck.Events.ShowAlertEvent>(async e =>
        {
            alertShowing = true;
            okShowing = false;
            await this.InvokeAsync(this.StateHasChanged);

            await Task.Delay(2000);
            if (alertShowing)
            {
                alertShowing = false;
                await this.InvokeAsync(this.StateHasChanged);
            }
        });

        await this.Show();
    }

    protected async Task Delete()
    {
        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", new[] { "Delete action instance?" });
        if (confirmed)
        {
            this.plugin.DeleteAction(this.action);
            NavManager.NavigateTo($"plugins/{pluginUUID}");
        }
    }


    protected async Task KeyDown()
    {
        if (!mouseDown)
        {
            mouseDown = true;
            await this.action.KeyDown();
        }
    }

    protected async Task KeyUp()
    {
        if (mouseDown)
        {
            await this.action.KeyUp();
            mouseDown = false;
        }
    }

    protected async Task Show()
    {
        await this.action.Show();
    }

    protected async Task Hide()
    {
        await this.action.Hide();
    }

    public void Dispose()
    {
        this.okListener.Dispose();
        this.alertListener.Dispose();
        _ = this.Hide();
    }
}
